import os

import numpy as np
import pytest
import torch
import scipy.stats as st
import pandas as pd

from spotlight.cross_validation import random_train_test_split
from spotlight.datasets import movielens
from spotlight.evaluation import mrr_score, rmse_score, precision_recall_score, sequence_mrr_score, sequence_mrr_score
from spotlight.factorization.implicit import ImplicitFactorizationModel
from spotlight.factorization.representations import BilinearNet
from spotlight.layers import BloomEmbedding
from spotlight.losses import (adaptive_hinge_loss,
                              bpr_loss,
                              hinge_loss,
                              pointwise_loss)
from spotlight.interactions import Interactions

from spotlight.torch_utils import cpu, gpu
from tensorboardX import SummaryWriter

if __name__ == '__main__':
    # interactions = movielens.get_movielens_dataset('100K')
    path1 = './have_Unique_combination.csv'
    '''path = '/Users/rahul.singh/Code/pytorchRec/userIDItemIdFull.csv'
    dataload = pd.read_csv(path)
    user = np.asarray((dataload[['Uid']]))
    user1 = [int(i) for i in user]
    r_id = np.asarray((dataload[['r_id']]))
    r_id1 = [int(i) for i in r_id]'''

    dataload = pd.read_csv(path1)
    user = np.asarray((dataload[['u_id']]))
    user1 = [int(i) for i in user]
    r_id = np.asarray((dataload[['r_id']]))
    r_id1 = [int(i) for i in r_id]

    # path= '/Users/rahul.singh/Code/pytorchRec/moreUser_item.csv'
    # dataload = pd.read_csv(path)
    # dataload = dataload.rename(columns={'0':'count'})

    interactions = Interactions(np.asarray(user1), np.asarray(r_id1))
    # user, item = movielens.get_restaurantuser_data(path)
    RANDOM_STATE = np.random.RandomState(42)
    if not os.path.exists("./save"):
        os.makedirs("./save")
    train, test = random_train_test_split(interactions,
                                          random_state=RANDOM_STATE)
    itr = 100
    lr = .0001
    l2 = 1e-1
    loss_function = 'bpr'
    checkpoint = "checkpoint4.pth"
    checkpointRetrain = "checkpoint4.pth"
    batch_size = 128
    tr_writer = SummaryWriter(log_dir=os.path.join("./log",
                                                   "MF config- LR {} l2 {} loss={} batch_size={}".format(lr, l2,
                                                                                                         loss_function,
                                                                                                         batch_size)))
    implicitFactorizationModel1 = ImplicitFactorizationModel(loss=loss_function,
                                                             n_iter=itr,
                                                             batch_size=batch_size,
                                                             learning_rate=lr,
                                                             l2=l2,
                                                             use_cuda=False,
                                                             writer=tr_writer)
    retrain = True

    if retrain:
        print("training started")

        implicitFactorizationModel1.fit(train, verbose=True)
        print("training done")

        checkpoint_file = os.path.join("./save", checkpoint)
        torch.save({
            # "fir":implicitFactorizationModel._net,
            "model": implicitFactorizationModel1._net.state_dict(),
            "optimizer": implicitFactorizationModel1._net.state_dict(),
        }, checkpoint_file)
    else:
        bestmodel_file = os.path.join("./save", checkpoint)
        load_res = torch.load(bestmodel_file, map_location="cpu")
        implicitFactorizationModel1._initialize(train)  #### make custom fuction instead
        implicitFactorizationModel1._net.load_state_dict(load_res["model"])
        implicitFactorizationModel1._net.load_state_dict(load_res["optimizer"])

    implicitFactorizationModel1._net.eval()

    '''if(retrain==False):
        checkpoint = checkpointRetrain
        print("traning batch started")

        implicitFactorizationModel1.fit(train)
        print("traning on batch done")

        checkpoint_file = os.path.join("/Users/rahul.singh/Code/pytorchRec/save", checkpointRetrain)
        torch.save({
            #"fir":implicitFactorizationModel._net,
            "model": implicitFactorizationModel1._net.state_dict(),
            "optimizer": implicitFactorizationModel1._net.state_dict(),
        }, checkpoint_file)
    print("testing started")
    
    
    bestmodel_file = os.path.join("/Users/rahul.singh/Code/pytorchRec/save", checkpointRetrain)
    load_res = torch.load(bestmodel_file, map_location="cpu")
    implicitFactorizationModel1._initialize(train)
    implicitFactorizationModel1._net.load_state_dict(load_res["model"])
    implicitFactorizationModel1._net.load_state_dict(load_res["optimizer"])
    implicitFactorizationModel1._net.eval()
    
    mrr = mrr_score(implicitFactorizationModel1, test, train=train).mean()
    #rmse = rmse_score(implicitFactorizationModel1,test)
    
    #print("error on RMSE ",rmse )
    print("MRR on test data with itr ",itr," lr ",lr," l2 ",l2," mrr val ", mrr , "checkpoint ",checkpoint)
    #result = implicitFactorizationModel1.predict(np.array([1]))
    #print(st.rankdata(result))
    
    
    #implicitFactorizationModel1.fit(test)
    #implicitFactorizationModel1._net.eval()
    #print("testing started")
    # model._net.
    #mrr = mrr_score(implicitFactorizationModel1, train, train=test).mean()

    #print("error:", mrr)'''
    # 1730 is sahil
    result = implicitFactorizationModel1.predict(np.array([1730]), np.array(
        [1443, 4455, 4752, 6254, 8845, 10696, 12820, 14964, 16246, 19882, 19982, 20942, 21335, 21922, 22048, 22125,
         22259, 22548, 22833, 28928, 29133, 29617, 29662, 30022, 30695, 32159, 32257, 32326, 33195, 33838, 35552, 35579,
         37473, 37583, 37719, 37720, 37734, 37971, 38113, 40798, 40802, 41826, 42250, 44052, 44061, 44629, 45004, 47472,
         48118, 48609, 49012, 49626, 50001, 50446, 50614, 70, 78, 94, 109, 143, 152, 153, 189, 199, 200, 205, 217, 221,
         224, 226, 230, 238, 239, 240, 241, 242, 245, 248, 255, 258, 262, 275, 299, 319, 321, 341, 381, 405, 406, 420,
         447, 450, 456, 506, 543, 546, 549, 555, 611, 618, 619, 627, 630, 631, 645, 655, 656, 666, 671, 675, 676, 745,
         763, 780, 788, 813, 834, 836, 837, 838, 883, 888, 923, 954, 965, 971, 1015, 1016, 1023, 1036, 1043, 1057, 1078,
         1106, 1110, 1155, 1214, 1239, 1311, 1312, 1317, 1324, 1348, 1368, 1369, 1417, 1420, 1449, 1466, 1473, 1495,
         2580, 2620, 2652, 2667, 2687, 2725, 2736, 2751, 2762, 2767, 2773, 2777, 2797, 2812, 2868, 2879, 2881, 2883,
         2884, 2898, 2901, 2902, 2906, 2949, 2953, 2958, 2964, 2965, 2970, 2981, 2984, 2999, 3000, 3016, 3020, 3024,
         3043, 3047, 3052, 3094, 3248, 4164, 4167, 4177, 4653, 4762, 4764, 4769, 4776, 4778, 4879, 4923, 4927, 4936,
         4941, 4950, 4958, 4964, 5331, 5574, 5598, 5639, 5841, 5860, 5874, 6241, 6258, 6325, 6465, 6467, 6498, 7547,
         7570, 7579, 7582, 7584, 7585, 7704, 7772, 7815, 7842, 7855, 7872, 8094, 8095, 8578, 8625, 8835, 8896, 8923,
         8943, 9087, 9210, 9242, 9255, 9256, 9489, 9566, 9673, 9774, 9795, 9806, 9855, 9857, 9885, 10090, 10226, 10239,
         11087, 11174, 11263, 11563, 11596, 11642, 11848, 12275, 12602, 12613, 12805, 12809, 13259, 13370, 13398, 13782,
         13888, 13911, 13985, 14083, 14151, 14167, 14221, 14232, 14250, 14286, 14333, 14446, 14483, 14485, 14736, 15035,
         15124, 15247, 15470, 15612, 15643, 15798, 15848, 15960, 15990, 16354, 16365, 16744, 16769, 17005, 17032, 18024,
         18182, 18198, 18229, 18806, 19092, 19231, 19259, 19269, 19271, 19477, 19616, 19623, 19636, 19695, 19711, 19748,
         19771, 19975, 20028, 20050, 20076, 20097, 20101, 20189, 20231, 20259, 20276, 20282, 20293, 20298, 20330, 20376,
         20379, 20384, 20387, 20397, 20401, 20416, 20469, 20524, 20639, 20737, 20757, 20852, 20854, 20862, 20898, 20941,
         20991, 20996, 21105, 21106, 21131, 21171, 21182, 21188, 21243, 21330, 21336, 21406, 21422, 21423, 21453, 21480,
         21481, 21488, 21590, 21753, 21783, 21893, 21912, 21917, 21918, 21921, 21969, 21975, 22050, 22108, 22151, 22175,
         22182, 22193, 22219, 22286, 22302, 22314, 22335, 22357, 22361, 22371, 22375, 22382, 22425, 22517, 22541, 22560,
         22576, 22593, 22594, 22607, 22658, 22667, 22743, 22797, 22799, 22992, 23028, 23029, 23048, 23085, 23092, 23344,
         23353, 23368, 23425, 23494, 23665, 23721, 23764, 24037, 24255, 24363, 24410, 24490, 24769, 24833, 25204, 25278,
         25364, 25425, 25634, 25736, 26254, 26266, 26279, 26707, 26716, 26725, 26845, 26880, 26889, 26913, 26971, 27113,
         27128, 27452, 28145, 28441, 28462, 28465, 28473, 28475, 28491, 28495, 28580, 28614, 29206, 29220, 29425, 29426,
         29464, 29465, 29471, 29486, 29606, 29620, 29626, 29635, 29641, 29666, 29673, 29680, 29717, 29888, 29906, 29919,
         29924, 29950, 29995, 30005, 30007, 30008, 30013, 30100, 30377, 30447, 30524, 30606, 30740, 31050, 31347, 31393,
         31397, 31464, 31469, 31554, 31923, 32088, 32107, 32120, 32197, 32209, 32218, 32223, 32291, 32292, 32327, 32380,
         32381, 32441, 32578, 32635, 32647, 32704, 32792, 32798, 32839, 32937, 32961, 33083, 33093, 33097, 33100, 33126,
         33127, 33252, 33296, 33299, 33311, 33328, 33331, 33334, 33386, 33418, 33419, 33498, 33594, 33605, 33607, 33644,
         33753, 33795, 33803, 33864, 34006, 34086, 34139, 34172, 34214, 34273, 34275, 34334, 34390, 34505, 34582, 34601,
         34616, 34641, 34767, 34803, 34822, 34946, 34961, 34986, 34989, 35003, 35008, 35021, 35089, 35164, 35250, 35327,
         35372, 35444, 35471, 35488, 35651, 35669, 35680, 35869, 35926, 35928, 36055, 36164, 36236, 36337, 36418, 36433,
         36611, 36767, 36803, 36841, 36879, 36885, 36963, 37116, 37273, 37305, 37361, 37441, 37498, 37679, 37726, 37776,
         37808, 37922, 37934, 37939, 37949, 37950, 37951, 37952, 37953, 37955, 37962, 37970, 37974, 38016, 38087, 38207,
         38252, 38273, 38274, 38291, 38434, 38448, 38462, 38492, 38760, 38762, 38786, 38822, 38926, 38983, 38994, 39037,
         39088, 39091, 39172, 39174, 39273, 39319, 39351, 39393, 39478, 39694, 39756, 39796, 39798, 39847, 39858, 39873,
         39939, 40118, 40121, 40130, 40134, 40176, 40178, 40235, 40287, 40288, 40452, 40457, 40522, 40526, 40538, 40576,
         40611, 40644, 40792, 40928, 41067, 41089, 41189, 41232, 41262, 41378, 41464, 41477, 41624, 41654, 41762, 41818,
         41823, 41843, 41925, 41932, 41935, 42137, 42189, 42217, 42220, 42258, 42425, 42470, 42484, 42522, 42549, 42569,
         42807, 42843, 43225, 43312, 43637, 43775, 43801, 43839, 43849, 43896, 43964, 43994, 44178, 44200, 44272, 44376,
         44466, 44477, 44481, 44491, 44533, 44599, 44639, 44711, 44740, 44775, 44783, 44794, 44864, 44883, 44916, 44924,
         44971, 44981, 45019, 45066, 45086, 45097, 45102, 45125, 45139, 45158, 45290, 45309, 45354, 45371, 45431, 45439,
         45490, 45527, 45632, 45633, 45636, 45652, 45700, 45734, 45763, 45827, 45966, 46073, 46094, 46293, 46298, 46334,
         46373, 46394, 46395, 46560, 46562, 46574, 46622, 46668, 46735, 46753, 46858, 46887, 46888, 46986, 47119, 47122,
         47168, 47285, 47391, 47488, 47613, 47614, 47843, 47851, 47878, 47903, 47962, 47979, 47982, 47985, 48044, 48132,
         48208, 48233, 48261, 48329, 48357, 48367, 48566, 48569, 48644, 48689, 48699, 48782, 48870, 49074, 49172, 49178,
         49181, 49247, 49297, 49388, 49415, 49420, 49422, 49425, 49440, 49524, 49717, 49724, 49746, 49845, 49957, 50002,
         50003, 50006, 50007, 50010, 50019, 50050, 50066, 50139, 50143, 50240, 50271, 50288, 50302, 50346, 50351, 50362,
         50390, 50414, 50481, 50487, 50612, 50617, 50621, 50655, 50776, 50819, 50876, 50903, 50926, 50927, 50943, 50993,
         51000, 51021, 51065, 51099, 51102, 51162, 51255, 51465, 51539, 51540, 51714, 51756, 51857, 51910, 51933, 51960,
         52087, 52209, 52262, 52289, 52292, 52421, 52428, 52431, 52444, 52451, 52474, 52495, 52593, 52877, 52915, 52945,
         52969, 272, 316, 629, 632, 633, 669, 791, 833, 871, 1374, 1465, 2665, 2923, 3058, 4910, 4971, 5442, 5606, 7912,
         8033, 9132, 9166, 11166, 12709, 12768, 12997, 13869, 14199, 15884, 15955, 18676, 18983, 19060, 19116, 20275,
         20585, 20785, 20994, 21594, 21639, 22338, 22399, 22497, 22542, 22614, 23034, 23473, 23653, 23662, 23734, 24380,
         24399, 24421, 25320, 25602, 26195, 26332, 26721, 27138, 28926, 29461, 29625, 29664, 29668, 29735, 29929, 29931,
         30080, 30243, 30335, 30364, 30673, 30872, 31346, 32436, 32629, 32703, 33130, 33248, 33358, 33733, 34140, 34569,
         34962, 34964, 34969, 35287, 35383, 35588, 36563, 37267, 37295, 37533, 37723, 37957, 39477, 39495, 39986, 39987,
         40064, 40521, 40525, 40739, 40930, 41941, 42299, 42545, 42669, 43751, 43783, 44007, 44206, 44465, 44562, 44563,
         44675, 45111, 45340, 45656, 46287, 46308, 46829, 47214, 47533, 47607, 48533, 49133, 49156, 49160, 49411, 49437,
         50035, 50043, 50505, 51939, 7864, 46071, 145, 280, 354, 474, 490, 751, 793, 991, 1281, 1501, 2557, 2764, 2810,
         2941, 2959, 8802, 12432, 14045, 14230, 14290, 14424, 14951, 16252, 16388, 19075, 20015, 20200, 20578, 20580,
         20689, 23730, 24746, 29267, 29628, 29665, 30959, 32293, 32951, 33603, 33765, 34446, 34449, 34568, 34876, 34967,
         34988, 35083, 35377, 35480, 35545, 35943, 36243, 36720, 37060, 37531, 37536, 37538, 38451, 40528, 40642, 41646,
         42365, 42838, 43531, 44184, 44269, 44364, 44876, 44920, 45256, 45313, 45327, 45649, 45869, 45921, 46376, 46698,
         46700, 47558, 47892, 47895, 48685, 49059, 49359, 49546, 49630, 49648, 50090, 50180, 50373, 52291, 52749, 52863,
         20351, 21733, 29997, 50930, 212, 383, 424, 1021, 1200, 1452, 2654, 2772, 2788, 2794, 2825, 2871, 2903, 2907,
         3081, 3089, 4871, 4939, 7287, 7590, 9486, 9875, 9888, 10267, 11770, 11974, 12553, 12803, 12930, 13171, 13983,
         14023, 14117, 14487, 17662, 19000, 19605, 19696, 20581, 20735, 21088, 21573, 22177, 23429, 23746, 31199, 32411,
         33050, 33187, 33729, 33971, 33976, 34966, 35352, 35382, 35449, 35623, 35868, 36054, 36204, 36211, 36215, 36308,
         36341, 36969, 37118, 37966, 38289, 38351, 38406, 41239, 41268, 41801, 41830, 42353, 43594, 44286, 44554, 44828,
         44845, 44885, 44985, 45099, 46022, 46024, 46306, 46335, 46352, 46361, 46510, 47325, 47496, 47497, 47958, 48129,
         49104, 49277, 49318, 49320, 49801, 50823, 50984, 50996, 51400, 52356, 52412, 53040, 43759, 121, 216, 289, 647,
         738, 2756, 2900, 2980, 3093, 7787, 7807, 11806, 16582, 19606, 19765, 20029, 20517, 20794, 23355, 24131, 24474,
         30932, 31002, 32797, 33767, 33780, 33796, 34040, 34098, 35192, 35394, 36550, 36766, 38517, 41200, 42164, 42169,
         42707, 43027, 43774, 44652, 44797, 45314, 45489, 46015, 46235, 46571, 47660, 48215, 48531, 51851, 52848]))
    print(st.rankdata(result))
